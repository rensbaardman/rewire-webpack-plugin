const util = require('util');
const exec = util.promisify(require('child_process').exec);
const path = require('path');
const del = require('del');

const package = require('../../package.json');
// this is the expected tar_name as generated by 'npm pack'
const tar_name = `${package.name}-${package.version}.tgz`

const timestamp = (new Date()).toJSON()
const folder = `.tmp-installation-tests-${timestamp}`;


async function create_installation() {

	await exec(`mkdir ${folder}`);
	// creates a tarball from rewire-webpack-plugin,
	// and places it in .tmp-installation-tests.
	let result = await exec('npm pack ../', {cwd: `./${folder}`});

	// stdout contains the tarball-name, which we assert to match
	// the expected tar name (which will be used later on)
	const generated_tar_name = result.stdout.replace('\n', '') // strip '\n' at the end
	if (tar_name !== generated_tar_name) {
		throw new Error(`expected tar_name to be '${tar_name}' but is '${generated_tar_name}'`);
	}

	return

}

async function install(test_name, packages) {

	function local_exec(command) {
		return exec(command, {cwd: `./${folder}/${test_name}`})
	}

	await exec(`mkdir ${test_name}`, {cwd: `./${folder}`});

	await local_exec(`npm init -y`)

	let result = await local_exec(`npm install ${packages.join(' ')}`);
	let errors = result.stderr.split('\n')

	// install rewire-webpack-plugin from the tarball
	result = await local_exec(`npm install ../${tar_name}`);
	errors.push(...result.stderr.split('\n'))

	return filter_errors(errors, test_name)

}

async function delete_installation() {
	return del(folder)
}


function filter_errors(errors, test_name) {

	const expected_errors = [
		// general
		`npm WARN ${test_name}@1.0.0 No description`,
		`npm WARN ${test_name}@1.0.0 No repository field.`,
		'npm notice created a lockfile as package-lock.json. You should commit this file.',
		'', // newline not properly removed
		// when installing rewire-webpack-plugin -- is outdated dependency in Rewire
		'npm WARN deprecated circular-json@0.3.3: CircularJSON is in maintenance only, flatted is its successor.',
		// when installing rewire-webpack-plugin -- see https://github.com/webpack/webpack/issues/8779
		// (strangely enough, this doesn't happen when only installing webpack itself)
		'npm WARN acorn-dynamic-import@4.0.0 requires a peer of acorn@^6.0.0 but none is installed. You must install peer dependencies yourself.',
		// when install rewire-webpack-plugin or webpack
		'node-pre-gyp WARN Using needle for node-pre-gyp https download '
	]

	let filtered_errors = errors.filter( (error) => !expected_errors.includes(error) )
	return filtered_errors

}

async function copy_shared_test_cases(test_name) {
	await exec(`mkdir ${folder}/${test_name}/test`)
	await exec(`cp -r test/rewire-shared-test-cases ${folder}/${test_name}/test`)

	// replace "require('../../lib/RewireWebpackPlugin.js')"
	// with    "require('rewire-webpack-plugin')"
	const regex = String.raw`s/\.\.\/\.\.\/lib\/RewireWebpackPlugin\.js/rewire-webpack-plugin/`;
	const webpack_config = "test/rewire-shared-test-cases/rewire-shared-test-cases.webpack.config.js"
	await exec(`sed -i '.backup' "${regex}" "${webpack_config}"`, {cwd: `${folder}/${test_name}`})
}

async function run_shared_test_cases(test_name) {
	await copy_shared_test_cases(test_name)

	const config_path = 'test/rewire-shared-test-cases/rewire-shared-test-cases.karma.config.js'
	const karma_command = `node_modules/karma/bin/karma start ${config_path}`
	return exec(karma_command, {cwd: `${folder}/${test_name}`})
}

module.exports = {
	create_installation: create_installation,
	install: install,
	delete_installation: delete_installation,
	run_shared_test_cases: run_shared_test_cases
}
